# ------------------------------------------------------------------------------
# Copyright 2012-2021 Aerospike, Inc.
#
# Portions may be licensed to Aerospike, Inc. under one or more contributor
# license agreements.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
# ------------------------------------------------------------------------------

{{- if .Values.enableAerospikeMonitoring }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-prometheus
  namespace: {{ .Release.Namespace }}
  labels: &Labels
    app: {{ template "aerospike.name" . }}-prometheus
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name }}
    app.kubernetes.io/component: prometheus
    unique-app: {{ .Release.Name }}-prometheus
    {{- with .Values.prometheus.labels }}{{ toYaml . | nindent 4 }}{{ end }}
  {{- with .Values.prometheus.annotations }}
  annotations: {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ .Release.Name }}-prometheus
  replicas: {{ .Values.prometheus.replicas }}
  podManagementPolicy: {{ .Values.prometheus.podManagementPolicy }}
  updateStrategy:
    type: {{ .Values.prometheus.updateStrategy.type }}
  selector:
    matchLabels:
      <<: *Labels
      {{- with .Values.prometheus.podLabels }}{{ toYaml . | nindent 6 }}{{ end }}
  template:
    metadata:
      labels:
        <<: *Labels
        {{- with .Values.prometheus.podLabels }}{{ toYaml . | nindent 8 }}{{ end }}
      annotations:
        {{- if .Values.autoRolloutConfig }}
        # TODO: Add an entry for secrets when used in future
        checksum/config: {{ include (print $.Template.BasePath "/prometheus-configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- with .Values.prometheus.podAnnotations }}{{ toYaml . | nindent 8 }}{{ end }}
    spec:
      serviceAccountName: {{ if .Values.rbac.create }}{{ template "aerospike.fullname" . }}{{ else }}{{ .Values.rbac.serviceAccountName }}{{ end }}
      {{- if eq .Values.prometheus.antiAffinity "hard" }}
      affinity:
      {{- with .Values.prometheus.affinity  }}
{{ toYaml . | indent 8 }}
      {{- end }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchExpressions:
                - key: unique-app
                  operator: In
                  values:
                  - {{ .Release.Name }}-prometheus
      {{- else if eq .Values.prometheus.antiAffinity "soft" }}
      affinity:
      {{- with .Values.prometheus.affinity  }}
{{ toYaml . | indent 8 }}
      {{- end }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ .Values.prometheus.antiAffinityWeight }}
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                  - key: unique-app
                    operator: In
                    values:
                    - {{ .Release.Name }}-prometheus
      {{- else}}
      {{- with .Values.prometheus.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      {{- with .Values.prometheus.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.prometheus.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: "init-chown-data"
        image: debian:9
        imagePullPolicy: "IfNotPresent"
        command: ["chown", "-R", "65534:65534", "{{ .Values.prometheus.volume.mountPath }}"]
        volumeMounts:
        {{- if .Values.prometheus.persistenceStorage }}
        {{- if .Values.prometheus.persistenceStorage.enabled }}
        {{- if eq .Values.prometheus.persistenceStorage.volumeMode "Filesystem"}}
        - name: {{ .Values.prometheus.persistenceStorage.name | quote }}
          mountPath: {{ .Values.prometheus.persistenceStorage.mountPath | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.prometheus.volume }}
        - name: {{ .Values.prometheus.volume.name | quote }}
          mountPath: {{ .Values.prometheus.volume.mountPath | quote }}
        {{- end }}
      containers:
      - name: prometheus-server
        image: "{{ .Values.prometheus.image.repository }}:{{ .Values.prometheus.image.tag }}"
        imagePullPolicy: "IfNotPresent"
        args:
          - --config.file=/etc/prometheus/prometheus.yaml
          - --storage.tsdb.path="{{ .Values.prometheus.volume.mountPath }}"
          - --web.listen-address=:{{ .Values.prometheus.serverPort | default 9090 }}
        ports:
          - containerPort: {{ .Values.prometheus.serverPort | default 9090 }}
        readinessProbe:
          httpGet:
            path: /-/ready
            port: {{ .Values.prometheus.serverPort | default 9090 }}
          initialDelaySeconds: {{ .Values.prometheus.readinessProbe.initialDelaySeconds | default 30 }}
          periodSeconds: {{ .Values.prometheus.readinessProbe.periodSeconds | default 10 }}
          timeoutSeconds: {{ .Values.prometheus.readinessProbe.timeoutSeconds | default 10 }}
          successThreshold: {{ .Values.prometheus.readinessProbe.successThreshold | default 1 }}
          failureThreshold: {{ .Values.prometheus.readinessProbe.failureThreshold | default 3 }}
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: {{ .Values.prometheus.serverPort | default 9090 }}
          initialDelaySeconds: {{ .Values.prometheus.livenessProbe.initialDelaySeconds | default 30 }}
          periodSeconds: {{ .Values.prometheus.livenessProbe.periodSeconds | default 10 }}
          timeoutSeconds: {{ .Values.prometheus.livenessProbe.timeoutSeconds | default 10 }}
          successThreshold: {{ .Values.prometheus.livenessProbe.successThreshold | default 1 }}
          failureThreshold: {{ .Values.prometheus.livenessProbe.failureThreshold | default 3 }}
        resources:
{{ toYaml .Values.prometheus.resources | indent 10 }}
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
        {{- if .Values.prometheus.persistenceStorage }}
        {{- if .Values.prometheus.persistenceStorage.enabled }}
        {{- if eq .Values.prometheus.persistenceStorage.volumeMode "Filesystem"}}
        - name: {{ .Values.prometheus.persistenceStorage.name | quote }}
          mountPath: {{ .Values.prometheus.persistenceStorage.mountPath | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.prometheus.volume }}
        - name: {{ .Values.prometheus.volume.name | quote }}
          mountPath: {{ .Values.prometheus.volume.mountPath | quote }}
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.prometheus.terminationGracePeriodSeconds | default 120 }}
      volumes:
      - name: config-volume
        configMap:
          name: {{ .Release.Name }}-prometheus-config
      {{- if .Values.prometheus.volume }}
      - name: {{ .Values.prometheus.volume.name | quote }}
{{ toYaml .Values.prometheus.volume.template  | indent 8}}
      {{- end }}
  volumeClaimTemplates:
    {{- if .Values.prometheus.persistenceStorage }}
    {{- if .Values.prometheus.persistenceStorage.enabled }}
    - metadata:
        name: {{ .Values.prometheus.persistenceStorage.name }}
        labels: *Labels
        {{- with $.Values.prometheus.annotations }}
        annotations: {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        volumeMode: {{ .Values.prometheus.persistenceStorage.volumeMode }}
        accessModes:
          - {{ .Values.prometheus.persistenceStorage.accessMode | quote }}
      {{- if hasKey .Values.prometheus.persistenceStorage "storageClass" }}
        storageClassName: {{ .Values.prometheus.persistenceStorage.storageClass | quote }}
      {{- end }}
        resources:
          requests:
            storage: {{ .Values.prometheus.persistenceStorage.size | quote }}
    {{- end }}
    {{- end }}
{{- end }}
